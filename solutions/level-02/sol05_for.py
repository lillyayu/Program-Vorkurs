"""
Eine der h√§ufigsten Anwendungen von For-Schleifen ist das durchlaufen von
Listen, zum Beispiel zum sortieren, zum herausfinden der gr√∂√üten Zahl, zum
√úberpr√ºfen der Werte in der Liste und viel weiterem.

Diese Aufgabe besch√§ftigt sich mit allen m√∂glichen Listenoperationen.

Hinweis: in Python gibt es viele dieser Operatoren schon (max() gibt das max-
imum einer Liste zur√ºck). Diese d√ºrft ihr hier nat√ºrlich nicht verwenden.

a) Wir haben eine Liste mit Wahrheitswerten (z.B. [True, True, False, True]).
Nun wollen wir √ºberpr√ºfen, ob jeder dieser Werte wahr ist. Falls auch nur einer
der Werte Falsch sein sollte, soll die Funktion False zur√ºckgeben, sonst True
Schreibe die Funktion "alle_wahr", welche genau dies tut.

b) Bei b haben wir eine Liste mit Noten von Studierenden. Wir wollen gerne
wissen, was die Bestnote ist, die in der Klausur erreicht wurde.
Schreibe die Funktion "bestnote", welche die Liste durchgeht und die Bestnote
ausgibt.
Wenn die Liste leer ist, gib None zur√ºck.

c) Schreibe die Funktion "teilbarkeit", welche eine Liste mit ganzen Zahlen,
sowie eine weitere ganze Zahl nimmt, welche als Teiler dient. Gib alle Zahlen
aus der Liste im Listenformat zur√ºck, die durch den angegebenen Teiler teilbar
sind.

d) Es gibt Professor:innen, welche zwar in ihrem Fach brilliant sind, deren
Vorlesungsfolien allerdings wirklich mittelm√§√üig sind. Des √∂fteren sieht man
dort Wortneusch√∂pfungen mit zusammengesetzten Nomen, welche immer l√§nger und
l√§nger Werden. Wir haben also eine Liste an Worten (strings), und wollen uns
das l√§ngste dieser Worte anschauen, um zu sehen was f√ºr kreative Erzeugnisse
es so gibt.
Schreibe die Funktion "l√§ngstes_wort" welche das l√§ngste Wort aus einer Liste
an Strings zur√ºckgibt.

e) (Schwierig) Vielleicht habt ihr ja schon die Aufgabe "t√ºrsteher" aus dem
Ordner "If-Verzweigungen" gemacht. Wenn nicht, d√ºrft ihr hier noch einmal
T√ºrsteher:in spielen.
Ihr kriegt eine Liste von G√§sten im Format tuple[str, int]: ("name", alter) und
sollt in einer neuen Liste alle Namen aufschreiben, welche unter 18 sind.
Schreibe die Funktion "√ºberpr√ºfe_g√§ste", welche genau dies tut.

Schwierigkeit
a) 2/5
b) 3/5
c) 3/5
d) 3/5
e) 4/5 üå∂Ô∏è

"""


def alle_wahr(liste: list[bool]) -> bool:
    """
    √úberpr√ºft, ob alle Wahrheitswerte in der Liste wahr sind.

    >>> alle_wahr([True, True])
    True
    >>> alle_wahr([True, True, False, True])
    False
    """
    for value in liste:
        if not value:
            return False
    return True


def bestnote(noten: list[float]) -> float | None:
    """
    Gibt die Beste Note der Liste von Kommazahlen zur√ºck.

    >>> bestnote([1.0, 3.3, 1.0, 5.0, 4.0, 2.3])
    1.0
    >>> bestnote([5.0])
    5.0
    >>> bestnote([])
    """
    if len(noten) == 0:
        return None
    kleinste_note: float = noten[0]
    for note in noten:
        if note < kleinste_note:
            kleinste_note = note
    return kleinste_note


def teilbarkeit(zahlen: list[int], teiler: int):
    """
    Gib alle Zahlen aus der Liste im Listenformat zur√ºck, die durch den
    angegebenen Teiler teilbar sind.
    >>> teilbarkeit([107, 108, 444, 378, 0], 27)
    [108, 378, 0]
    """
    teilbar = []
    for zahl in zahlen:
        if zahl % teiler == 0:
            teilbar += [zahl]
    return teilbar


def l√§ngstes_wort(w√∂rter: list[str]) -> str:
    """
    Gibt das l√§ngste Wort aus einer Liste von Strings zur√ºck.
    Wenn es zwei gleichlange gibt, nimm das erste.

    >>> l√§ngstes_wort([])
    ''
    >>> l√§ngstes_wort(["die", "tasse", "kaffee", "tassen"])
    'kaffee'
    """
    l√§ngstes: str = ""
    for wort in w√∂rter:
        if len(wort) > len(l√§ngstes):
            l√§ngstes = wort
    return l√§ngstes


def √ºberpr√ºfe_g√§ste(g√§steliste: list[tuple[str, int]]) -> list[str]:
    """
    Gibt eine Liste mit den Namen der Menschen zur√ºck, die unter 18 sind.

    >>> √ºberpr√ºfe_g√§ste([])
    []
    >>> √ºberpr√ºfe_g√§ste([("Jakob", 19)])
    []
    >>> √ºberpr√ºfe_g√§ste([("Jakob", 19),("Sophia", 17), ("Anna", 18)])
    ['Sophia']
    >>> √ºberpr√ºfe_g√§ste([("Jakob", 12),("Sophia", 17), ("Anna", 17)])
    ['Jakob', 'Sophia', 'Anna']
    """
    returnlist: list[str] = []
    for name, alter in g√§steliste:
        if alter < 18:
            returnlist.append(name)
    return returnlist
